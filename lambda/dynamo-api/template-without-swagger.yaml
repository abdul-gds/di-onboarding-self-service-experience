AWSTemplateFormatVersion: 2010-09-09
Description: >-
  dynamo-api
Transform:
- AWS::Serverless-2016-10-31

Resources:

  putUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-user.putUserHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: 'onboarding'
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: 'onboarding'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /put-user
            Method: POST
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/put-user.ts

  getUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-user.getUserHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Retrieve a user item from the table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 'onboarding'
      Environment:
        Variables:
          SAMPLE_TABLE: 'onboarding'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /get-user
            Method: POST
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/get-user.ts

  putServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-service.putServiceHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add a service to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: 'onboarding'
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: 'onboarding'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /put-service
            Method: POST
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/put-service.ts

  putServiceUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-service-user.putServiceUserHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add a service to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: 'onboarding'
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: 'onboarding'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /put-service-user
            Method: POST
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/put-service-user.ts

  NewServiceStepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ./src/state-machines/newService.json
      DefinitionSubstitutions:
        PutServiceFunctionArn: !GetAtt putServiceFunction.Arn
        PutServiceUserFunctionArn: !GetAtt putServiceUserFunction.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName:
              !Ref putServiceFunction
        - LambdaInvokePolicy:
            FunctionName:
              !Ref putServiceUserFunction
      Events:
        PostApi:
          Api:
            Type: Api
            Properties:
              Path: /new-service
              Method: Post

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
